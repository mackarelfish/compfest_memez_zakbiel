{"version":3,"sources":["components/meme/meme-overlay/index.js","components/meme/index.js","components/saved-meme/index.js","components/nav/index.js","components/meme-app/index.js","index.js"],"names":["MemeOverlay","memeData","className","overlay","Meme","props","useState","clicked","setClicked","subreddit","title","url","postLink","toggleSave","saved","console","log","onClick","height","src","alt","style","position","maxHeight","marginBottom","href","width","fill","xmlns","d","stroke","e","stopPropagation","SavedMeme","toggleSaveMeme","search","res","setRes","useEffect","filter","split","s","toLowerCase","includes","map","items","idx","key","length","Nav","setSearch","toggle","setToggle","to","prev","viewBox","rx","transform","type","value","onChange","target","placeholder","activeStyle","color","opacity","MemeApp","location","useLocation","loading","memes","count","setMemes","localStorage","getItem","memeFromLocal","JSON","parse","fetchMemez","intersect","setIntersect","fetch","then","r","json","setItem","stringify","useLayoutEffect","pathname","trigger","document","querySelector","observer","IntersectionObserver","entries","forEach","isIntersecting","setTimeout","observe","setSaved","meme","i","getSavedMemeFromLocal","data","exact","path","textAlign","id","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.dc48d7b5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Meme from \"../../meme\";\r\n\r\nimport \"./MemeOverlay.css\";\r\n\r\nfunction MemeOverlay(memeData) {\r\n    return (\r\n        <div className=\"memeOverlay\">\r\n            <Meme {...memeData} overlay={false} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MemeOverlay;\r\n","import React, { useState } from \"react\";\r\n\r\nimport \"./Meme.css\";\r\nimport MemeOverlay from \"./meme-overlay\";\r\n\r\nfunction Meme(props) {\r\n    const [clicked, setClicked] = useState(false);\r\n    const {\r\n        subreddit,\r\n        title,\r\n        url,\r\n        postLink,\r\n        toggleSave,\r\n        saved,\r\n        overlay\r\n    } = props;\r\n    console.log(props);\r\n    return (\r\n        <div className=\"memeCard\">\r\n            <div className=\"cardWrapper\">\r\n                <div\r\n                    className=\"meme_imgwrapper\"\r\n                    onClick={() => {\r\n                        if (!overlay) return;\r\n                        setClicked(true);\r\n                    }}\r\n                >\r\n                    <img height=\"250\" src={url} alt=\"meme_img\" />\r\n                </div>\r\n                <div\r\n                    className=\"caption\"\r\n                    style={\r\n                        !overlay\r\n                            ? {\r\n                                  position: \"initial\",\r\n                                  maxHeight: \"initial\",\r\n                                  marginBottom: \"0\"\r\n                              }\r\n                            : null\r\n                    }\r\n                >\r\n                    <div className=\"captionContainer\">\r\n                        <div className=\"captionInfo\">\r\n                            <p>\r\n                                <a href={postLink}>{title}</a>\r\n                            </p>\r\n                            <p>/r/{subreddit}</p>\r\n                        </div>\r\n                        <div\r\n                            className=\"captionSave\"\r\n                            onClick={() => {\r\n                                toggleSave({ title, subreddit, url });\r\n                            }}\r\n                        >\r\n                            <svg\r\n                                width=\"12\"\r\n                                height=\"15\"\r\n                                fill={saved ? \"#FFCB15\" : \"none\"}\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                            >\r\n                                <path\r\n                                    d=\"M5.24772 11.354L.5 14.1287V.5h10v13.6287L5.75228 11.354 5.5 11.2066l-.25228.1474z\"\r\n                                    stroke=\"#FFCB15\"\r\n                                />\r\n                            </svg>\r\n                            <p>{saved ? \"Saved\" : \"Save\"}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {clicked && (\r\n                <div>\r\n                    <div\r\n                        className=\"overlay\"\r\n                        onClick={e => {\r\n                            e.stopPropagation();\r\n                            console.log(\"im backb\");\r\n                            setClicked(false);\r\n                        }}\r\n                    ></div>\r\n                    <MemeOverlay {...props} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Meme;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport Meme from \"../meme\";\r\n\r\nimport \"./SavedMeme.css\";\r\n\r\nfunction SavedMeme({ toggleSaveMeme, saved, search }) {\r\n    const [res, setRes] = useState([]);\r\n    useEffect(() => {\r\n        if (!search) return;\r\n        setRes(\r\n            saved.filter(e => {\r\n                let res = true;\r\n                for (let s of search.split(\" \")) {\r\n                    if (!e.title.toLowerCase().includes(s.toLowerCase()))\r\n                        res = false;\r\n                }\r\n                return res;\r\n            })\r\n        );\r\n    }, [search, saved]);\r\n\r\n    return (\r\n        <div className=\"SavedMeme\">\r\n            <div className=\"saved_msg\">\r\n                <h1>Saved Memes</h1>\r\n                <p>These are the memes that you love</p>\r\n            </div>\r\n            <div className=\"memeGrid\">\r\n                {search\r\n                    ? res.map((items, idx) => {\r\n                          return (\r\n                              <Meme\r\n                                  {...items}\r\n                                  key={idx}\r\n                                  toggleSave={toggleSaveMeme}\r\n                                  saved={\r\n                                      saved.filter(s => s.url === items.url)\r\n                                          .length === 1\r\n                                  }\r\n                                  overlay={true}\r\n                              />\r\n                          );\r\n                      })\r\n                    : saved.map((items, idx) => {\r\n                          return (\r\n                              <Meme\r\n                                  {...items}\r\n                                  key={idx}\r\n                                  toggleSave={toggleSaveMeme}\r\n                                  saved={\r\n                                      saved.filter(s => s.url === items.url)\r\n                                          .length === 1\r\n                                  }\r\n                                  overlay={true}\r\n                              />\r\n                          );\r\n                      })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SavedMeme;\r\n","import React, { useState } from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav({ search, setSearch }) {\r\n    const [toggle, setToggle] = useState(false);\r\n    return (\r\n        <div className=\"Nav\">\r\n            <div className=\"nav_container\">\r\n                <div className=\"nav_logo\">\r\n                    <h3>\r\n                        <Link to=\"/discover\">PACIL-GAG</Link>\r\n                    </h3>\r\n                    <div\r\n                        className=\"nav_toggle\"\r\n                        onClick={() => setToggle(prev => !prev)}\r\n                    >\r\n                        <svg\r\n                            width=\"26\"\r\n                            height=\"13\"\r\n                            viewBox=\"0 0 26 13\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            <rect\r\n                                width=\"26\"\r\n                                height=\"4\"\r\n                                rx=\"2\"\r\n                                transform=\"matrix(1 0 0 -1 0 4)\"\r\n                                fill=\"white\"\r\n                            />\r\n                            <rect\r\n                                width=\"26\"\r\n                                height=\"4\"\r\n                                rx=\"2\"\r\n                                transform=\"matrix(1 0 0 -1 0 13)\"\r\n                                fill=\"white\"\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className=\"nav_content\"\r\n                    style={{ maxHeight: toggle ? \"200px\" : \"0px\" }}\r\n                >\r\n                    <div className=\"nav_search\">\r\n                        <input\r\n                            type=\"text\"\r\n                            value={search}\r\n                            onChange={e => setSearch(e.target.value)}\r\n                            placeholder=\"Search some juicy memez...\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"nav_nav\">\r\n                        <ul>\r\n                            <li>\r\n                                <NavLink\r\n                                    to=\"/discover\"\r\n                                    activeStyle={{\r\n                                        color: \"white\",\r\n                                        opacity: 1\r\n                                    }}\r\n                                >\r\n                                    Discover\r\n                                </NavLink>\r\n                            </li>\r\n                            <li>\r\n                                <NavLink\r\n                                    to=\"/saved\"\r\n                                    activeStyle={{\r\n                                        color: \"white\",\r\n                                        opacity: 1\r\n                                    }}\r\n                                >\r\n                                    Saved Meme\r\n                                </NavLink>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useEffect, useState, useLayoutEffect } from \"react\";\r\nimport { Switch, Route, Redirect, useLocation } from \"react-router-dom\";\r\n\r\nimport \"./MemeApp.css\";\r\n\r\nimport Meme from \"../meme\";\r\nimport SavedMeme from \"../saved-meme\";\r\nimport Nav from \"../nav\";\r\n\r\nfunction MemeApp() {\r\n    let location = useLocation();\r\n\r\n    // handle storing memez\r\n    const [memes, setMemes] = useState({ loading: true, memes: [], count: 0 });\r\n    useEffect(() => {\r\n        // caching last loaded meme data\r\n        if (localStorage.getItem(\"memez_data\")) {\r\n            const memeFromLocal = JSON.parse(\r\n                localStorage.getItem(\"memez_data\")\r\n            );\r\n            setMemes({\r\n                loading: false,\r\n                count: memeFromLocal.count,\r\n                memes: memeFromLocal.memes\r\n            });\r\n            return;\r\n        }\r\n        fetchMemez();\r\n    }, []);\r\n\r\n    // handle sorting memez from search\r\n    const [search, setSearch] = useState(\"\");\r\n    const [res, setRes] = useState([]);\r\n    useEffect(() => {\r\n        if (!search) return;\r\n        setRes(\r\n            memes.memes.filter(e => {\r\n                let res = true;\r\n                for (let s of search.split(\" \")) {\r\n                    if (!e.title.toLowerCase().includes(s.toLowerCase()))\r\n                        res = false;\r\n                }\r\n                return res;\r\n            })\r\n        );\r\n    }, [search, memes.memes]);\r\n\r\n    // reset search when changing route\r\n    useEffect(() => {\r\n        setSearch(\"\");\r\n    }, [location]);\r\n\r\n    // handle scrolling ad infinitum\r\n    const [intersect, setIntersect] = useState(false);\r\n    useLayoutEffect(() => {\r\n        if (location.pathname !== \"/discover\") return;\r\n        const trigger = document.querySelector(\"#triggerButton\");\r\n        const observer = new IntersectionObserver(entries => {\r\n            entries.forEach(e => setIntersect(e.isIntersecting));\r\n        });\r\n        trigger && setTimeout(() => observer.observe(trigger), 4000);\r\n    }, [location]);\r\n\r\n    useEffect(() => {\r\n        if (intersect && !search) fetchMemez();\r\n    }, [intersect, search]);\r\n\r\n    // func for fetching memez\r\n    function fetchMemez() {\r\n        setMemes(({ memes, count }) => ({ loading: true, memes, count }));\r\n        fetch(\"https://meme-api.herokuapp.com/gimme/30\")\r\n            .then(r => r.json())\r\n            .then(d => {\r\n                d.loading = false;\r\n                if (!d.memes) d = { loading: true, count: 0, memes: [] };\r\n\r\n                setMemes(prev => {\r\n                    return {\r\n                        loading: d.loading,\r\n                        count: [...prev.memes, ...d.memes].length,\r\n                        memes: [...prev.memes, ...d.memes]\r\n                    };\r\n                });\r\n                localStorage.setItem(\"memez_data\", JSON.stringify(d));\r\n            });\r\n    }\r\n\r\n    // handle saving memes to saved list\r\n    const [saved, setSaved] = useState([]);\r\n    useEffect(() => {\r\n        const getSavedMemeFromLocal = localStorage.getItem(\"saved_meme\");\r\n        if (getSavedMemeFromLocal)\r\n            setSaved(JSON.parse(getSavedMemeFromLocal).data);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"saved_meme\", JSON.stringify({ data: saved }));\r\n    }, [saved]);\r\n\r\n    function toggleSaveMeme(meme) {\r\n        const getMeme = saved.filter(d => d.url === meme.url);\r\n        if (getMeme.length === 1) {\r\n            setSaved(prev => prev.filter(i => i.url !== meme.url));\r\n        } else {\r\n            setSaved(prev => [...prev, meme]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Nav setSearch={setSearch} search={search} />\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Redirect to=\"/discover\" />\r\n                </Route>\r\n                <Route path=\"/discover\">\r\n                    <div className=\"App\">\r\n                        <div className=\"memeGrid\">\r\n                            {search\r\n                                ? res.map((items, idx) => {\r\n                                      return (\r\n                                          <Meme\r\n                                              {...items}\r\n                                              key={idx}\r\n                                              toggleSave={toggleSaveMeme}\r\n                                              saved={\r\n                                                  saved.filter(\r\n                                                      s => s.url === items.url\r\n                                                  ).length === 1\r\n                                              }\r\n                                              overlay={true}\r\n                                          />\r\n                                      );\r\n                                  })\r\n                                : memes.memes.map((items, idx) => {\r\n                                      return (\r\n                                          <Meme\r\n                                              {...items}\r\n                                              key={idx}\r\n                                              toggleSave={toggleSaveMeme}\r\n                                              saved={\r\n                                                  saved.filter(\r\n                                                      s => s.url === items.url\r\n                                                  ).length === 1\r\n                                              }\r\n                                              overlay={true}\r\n                                          />\r\n                                      );\r\n                                  })}\r\n                        </div>\r\n                        {memes.loading && (\r\n                            <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n                                <img\r\n                                    src=\"https://i.giphy.com/media/T8Dhl1KPyzRqU/giphy.webp\"\r\n                                    alt=\"searching the interwebz\"\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        <button id=\"triggerButton\" onClick={fetchMemez}>\r\n                            fetch the memez\r\n                        </button>\r\n                    </div>\r\n                </Route>\r\n                <Route path=\"/saved\">\r\n                    <SavedMeme {...{ toggleSaveMeme, saved, search }} />\r\n                </Route>\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MemeApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport MemeApp from \"./components/meme-app\";\n\nReactDOM.render(\n    <Router>\n        <MemeApp />\n    </Router>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}